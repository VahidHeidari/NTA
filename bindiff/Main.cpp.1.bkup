
#include <stdarg.h>
#include <unistd.h>

#include <iostream>

#include "Record.h"
#include "Reader.h"
#include "Writer.h"
#include "Searcher.h"

using namespace std;

#define MIN_REQUIRED_ARGS 3

static const char* VERSION = "1.0.0";

const char* filename[3];

template <bool version_only = false>
void print_help()
{
	putchar('\n');

	if (version_only) {
		printf("    version : %s\n", VERSION);
	} else {
		puts("Usage : bindiff [options] input1 input2 [output]\n");
		printf("    version : %s\n", VERSION);
	}

	putchar('\n');
}

void exit_error(const char* fmt, ...)
{
	va_list va;

	va_start(va, fmt);
	vfprintf(stderr, fmt, va);
	putchar('\n');
	va_end(va);

	exit(1);
}

void parse_comand_line(int argc, char** argv)
{
	if (argc < MIN_REQUIRED_ARGS)
		exit_error("2 input file and 1 output file requierd!");

	if (argv[argc - 1][0] != '-' && argv[argc - 2][0] != '-' && argv[argc - 3][0] != '-') {
		filename[0] = argv[argc - 3];		// input1
		filename[1] = argv[argc - 2];		// input2
		filename[2] = argv[argc - 1];		// output
		argc -= 3;
	} else {
		filename[0] = argv[argc - 2];		// input1
		filename[1] = argv[argc - 1];		// input2
		filename[2] = nullptr;				// stdout
		argc -= 2;
	} 

	int c = -1;
	while ((c = getopt(argc, argv, "vcph")) != -1) {
		switch (c) {
		case 'h':
			print_help();
			exit(0);

		case 'v':
			print_help<true>();
			exit(0);

		case 'c':
			cout << "Complete search" << endl;
			break;

		case 'p':
			cout << "Pcap diff" << endl;
			break;

		case ':':
		case '?':
		default:
			exit_error("Could not parse comand line arguments!");
			break;
		}
	}
}

int main(int argc, char** argv)
{
	parse_comand_line(argc - 1, &argv[1]);

	// Debug only
	for (int i = 0; i < argc; ++i)
		cout << "argv[" << i << "] : " << argv[i] << endl;

	cout << endl;
	cout << "Input1 : " << filename[0] << endl;
	cout << "Input2 : " << filename[1] << endl;
	if (filename[2]) cout << "output : " << filename[2] << endl;

	return 0;
}

